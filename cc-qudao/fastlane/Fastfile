# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
# -*- coding: UTF-8 -*-

#require "pathname"
# 终端输入命令如： fastlane ios SnailHome_onlineTest  , fastlane ios SnailHome_dev ,
# 	       fastlane ios SnailHome_appStore
fastlane_require "pathname"

default_platform(:ios)
#测试开发包
platform :ios do

    #获取用户名
    def getUserName
        puts "开始获取当前用户名"
        #通过获取当前文件的完整路径，再分割出用户名来获取用户名，办法虽然笨了点，还是实用
        pathName = Pathname.new(__FILE__).realpath
        arr = pathName.to_s.split('/')
        return arr[2]
    end
    #文件夹命名,以项目名加时间
   fileName = "SnailHome"
   #获取电脑登录用户名,这样就可以避免在不同的电脑需要修改脚本，直接动态获取，在不同的电脑上的目录是一样的
   #userName = "#{`whoami`}"
   userName = getUserName
   #去掉首尾空格，不然就识别不出用户了
   userName.strip!
   puts userName
    #执行每个lane之前都会执行这个
   before_each do |lane, options|
    # ...
    currentTime = Time.now.strftime("%Y-%m-%d %H-%M-%S")
    if lane == :"SnailHome_dev"
        fileName = "SnailHome_dev " + currentTime
    elsif lane == :"SnailHome_devtest"
        fileName = "SnailHome_devtest " + currentTime
    elsif lane == :"SnailHome_onlineTest"
        fileName = "SnailHome_onlineTest " + currentTime
    elsif lane == :"SnailHome_appStore"
        fileName = "SnailHome_appStore " + currentTime
    end
    #puts fileName
   end

  desc "渠道经理项目自动打包"
  lane :SnailHome_dev do

    #获取本机电脑名称
    #puts "computer name is: #{`hostname`}"
    #获取本机登录用户名
    #puts "user name is: #{`whoami`}"

    gym(
        clean:true,
        silent:true,
	    scheme:"SnailHome_Dev",
	    workspace:"SnailHome.xcworkspace",
        configuration:"Debug",
	    export_method:"enterprise",
	    output_directory:"/Users/" + userName + "/Desktop/渠道经理IPA/" + fileName,
	    output_name:"SnailHome_dev"
        )
      	
 end

    lane :SnailHome_devtest do

    #获取本机电脑名称
    #puts "computer name is: #{`hostname`}"
    #获取本机登录用户名
    #puts "user name is: #{`whoami`}"

    gym(
    clean:true,
    silent:true,
    scheme:"SnailHome_DevTest",
    workspace:"SnailHome.xcworkspace",
    configuration:"Debug",
    export_method:"enterprise",
    output_directory:"/Users/" + userName + "/Desktop/渠道经理IPA/" + fileName,
    output_name:"SnailHome_devtest"
)

end

#正式上线测试包
 lane :SnailHome_onlineTest do |options|

    puts options

    #puts '更新打包描述证书,这是为了新增加设备之后，可以更新下来'
    #获取外部传进来的参数update
    update = options[:update]

    #puts update
=begin
如果需要更新描述文件，执行的时候就要添加update参数，如：fastlane SnailHome_onlineTest update:1  其中"1"这个是构建版本号，再次打包的时候使用最近一次的构建版本号，如：已有一个构建版本号：1，再次打包更新的时候就用 update：1；
主要是用在添加了测试设备之后使用
在上线测试包里增加签名事件，主要是在测试中发现，新添加了设备之后，相关证书并没有更新，所以这里作更新，但证书更新了之后，下次如果没有更新设备信息等，就不需要再下载，
所以这里作了一个参数选项，从外部传参数进来，有update参数，则会重新下载描述文件，否则用已有的,节省时间
=end
    if update
        puts '需要更新描述文件'
        sigh(
            adhoc:true,
            force:true,
            output_path:"/Users/" + userName + "/Desktop/Profile/",
            provisioning_name:"SnailHome_adhot_profile",
            filename:"SnailHome_adhot.mobileprovision",
            )
    end

    gym(
        clean:true,
        silent:true,
        scheme:"SnailHome_AppStore",
        workspace:"SnailHome.xcworkspace",
        export_method:"ad-hoc",#给注册了的机子测试用
        output_directory:"/Users/" + userName + "/Desktop/渠道经理IPA/" + fileName,
        output_name:"SnailHomeOnlineTest"
        )

 end

#正式上线appstore包
lane :SnailHome_appStore do |options|


    sigh(
        force:true,
        output_path:"/Users/" + userName + "/Desktop/Profile/",
        provisioning_name:"CM_appstore_profile",
        filename:"CM_appstore_profile.mobileprovision",
    )

    gym(
        clean:true,
        silent:true,
        scheme:"SnailHome_AppStore",
        workspace:"SnailHome.xcworkspace",
        export_method:"app-store",#用于上传到appStore用
        output_directory:"/Users/" + userName + "/Desktop/渠道经理IPA/" + fileName,
        output_name:"SnailHome_AppStore"
    )


    deliver(
        ipa: "/Users/" + userName + "/Desktop/渠道经理IPA/" + fileName + "/" + "SnailHome_AppStore.ipa",
        skip_screenshots: true,
        skip_metadata: true
    )


 end

#全部完成之后后执行这个
 after_all do |lane, options|


    # 开始上传蒲公英
    if lane != :"SnailHome_appStore"
        puts "开始上传蒲公英..."
        pgyer(api_key:"9a94d94d5a40c648a9ba0f73f584f4dd",user_key:"adf6b648ddfa4c8e9b0a732a67ab8b76")
    end

    #向钉钉发送消息的方法
    def sendMessage(appInfor,message)
        puts '成功之后发送相关的消息通知'
        _api_key = "9a94d94d5a40c648a9ba0f73f584f4dd"
        #app 安装地址
        appInstallUrl = "https://www.pgyer.com/apiv2/app/install?_api_key=" + _api_key + "&" + "buildKey=" + appInfor["buildKey"]
        messageParam = {}
        markdown = {}
        markdown["title"] = appInfor["buildName"]
        markdown["text"] =   "### " + message + "\n\n" + "#### BuildIdentifier: " + "**" + appInfor["buildIdentifier"] + "**" + "\n\n" + "#### 上传时间: " + "**" + appInfor["buildUpdated"] + "**" + "\n\n" + '###### 版本号为: ' + "**" + appInfor["buildVersion"] + "**" + "\n\n" + '###### 最新建立版本号为: ' + "**" + appInfor["buildBuildVersion"] + "**" + "\n\n" + "![扫码安装二维码]" + "(" + appInfor["buildQRCodeURL"] + ")" + "\n\n\n" + "[查看详细内容]" + "(" + 'https://www.pgyer.com/' + appInfor["buildShortcutUrl"] +")" + "\n\n\n" + "[点击安装]" + "(" + appInstallUrl +")" + "\n\n" + ">" + "@所有人" + "\n"
        messageParam["msgtype"] = "markdown"
        messageParam["markdown"] = markdown
        at = {}
        at["isAtAll"] = true
        #at["atMobiles"] = Array["18924121125"]
        messageParam["at"] = at
        #puts messageParam
        #puts messageParam.to_json
        #调用shell脚本发送消息请求
#以下是钉钉机器人的链接
    #sh('curl','https://oapi.dingtalk.com/robot/send?access_token=1e7042195ae86bfd1ce6af8113e225f70971f3afee0dc60f746280e3eef1a82c','-#H','Content-Type: application/json','-d',messageParam.to_json)
	sh('curl','https://oapi.dingtalk.com/robot/send?access_token=0ffe808b72009374e85f7e8265a525d2af71b72ddc20aa6f921baa3c2a3705a3','-H','Content-Type: application/json','-d',messageParam.to_json)

    end

    #获取app信息的方法,把data字段的值返回
    def getAppInfor(appKey)
        puts '向蒲公英获取app的相关信息'
        pyurl = "https://www.pgyer.com/apiv2/app/view"
        pyParams = {}
        pyParams["_api_key"] = "9a94d94d5a40c648a9ba0f73f584f4dd"
        pyParams["appKey"] = appKey
        pyParams["userKey"] = "adf6b648ddfa4c8e9b0a732a67ab8b76"
        puri = URI.parse(pyurl)
        pres = Net::HTTP.post_form(puri, pyParams)
        resbody = JSON.parse(pres.body)
        #puts resbody
        puts "请求蒲公英信息成功"
        return resbody["data"]
    end

#默认使用蒲公英线上环境的appKey，！！！！！！！！ 必须设置好appKey ,否则发送到钉钉会发错展示数据、二维码
    appKey = ""
    message = "渠道经理测试打包成功"
    if lane == :"SnailHome_dev"
	#开发环境蒲公英appKey
        appKey = "4d183d235febcbb06d37198a16c390c1"
        message = "IOS版-渠道经理-本地环境打包成功"
    elsif lane == :"SnailHome_devtest"
        appKey = "612ce81fbbd3f370c867464981ad5dc7"
        message = "IOS版-渠道经理-测试环境打包成功"
    elsif lane == :"SnailHome_onlineTest"
        appKey = "4ea82e7d5bcdf013cb71e5c4cf9f6ea6"
        message = "IOS版-渠道经理-正式环境测试版本打包成功"
    elsif lane == :"SnailHome_appStore"
        message = "IOS版-渠道经理-正式环境上线版本打包成功"
    end

    if lane != :"SnailHome_appStore"
        #请求app的相关信息
        appInfor = getAppInfor appKey
        #发送钉钉群消息
        sendMessage appInfor,message

        #发送mac通知
        notification(
            title:"渠道经理",
            message:message,
            app_icon:"https://www.pgyer.com/image/view/app_icons/" + appInfor["buildIcon"]
        )
    end
 end

end
